"""
Django settings for py_backend project.

Generated by 'django-admin startproject' using Django 5.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import logging
from pathlib import Path
import os
from dotenv import load_dotenv

from utils.DB.redisDB.main import AsyncRedisManager, RedisManager

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-v8!q%w9s+^x70(w(p21#s62tjse6qi75oigk=oke+&6qfuhngx'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']
logger = logging.getLogger(__name__)    
load_dotenv(os.path.join(BASE_DIR, '.env'))
EXCLUDE_AUTH_IP = os.environ.get('EXCLUDE_AUTH_IP', '*')

# REDIS 설정을 .env에서 불러오기
REDIS_HOST = os.environ.get('REDIS_HOST', '127.0.0.1')
# 포트와 DB 인덱스는 정수로 변환
REDIS_PORT = int(os.environ.get('REDIS_PORT', 6379))
REDIS_DID = int(os.environ.get('REDIS_DID', 0))
REDIS_PASSWORD = os.environ.get('REDIS_PASSWORD', None)


# ASGI 설정
ASGI_APPLICATION = 'py_backend.asgi.application'

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'channels',
    'channels_redis',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'django_filters',
]

INSTALLED_APPS += [
    'agriseed.apps.AgriseedConfig',
    'LSISsocket.apps.LSISsocketConfig',
    'corecode.apps.CorecodeConfig',
    'MCUnode.apps.McunodeConfig',
    'data_entry.apps.DataEntryConfig',
]
REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'agriseed.exceptions.custom_exception_handler',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.SessionAuthentication',  # enable session login
        'utils.custom_permission.CustomIPAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
}

from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

MIDDLEWARE = [
    'py_backend.middleware.ExcludeJWTForLocalhostMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = 'py_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [('127.0.0.1', 6379),],
        },
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    },
}

WSGI_APPLICATION = 'py_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases
try:
    if os.getenv('DB_ENGINE') is None:
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.sqlite3',
                'NAME': BASE_DIR / 'db.sqlite3',
            }
        }
    else:
        DATABASES = {
            'default': {
                'ENGINE': os.getenv('DB_ENGINE', 'django.db.backends.postgresql'),
                'NAME': os.getenv('DB_NAME'),
                'USER': os.getenv('DB_USER'),
                'PASSWORD': os.getenv('DB_PASSWORD'),
                'HOST': os.getenv('DB_HOST'),
                'PORT': os.getenv('DB_PORT'),
            }
        }
except Exception as e:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
# Use default Django user model (auth.User). Previously set to 'corecode.User' which is not used in this project.
AUTH_USER_MODEL = 'auth.User'

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
    # custom complex password validator
    {
        'NAME': 'corecode.validators.ComplexPasswordValidator',
        'OPTIONS': {
            'min_length': 8,
            'require_upper': True,
            'require_lower': True,
            'require_digit': True,
            'require_special': True,
        }
    },
]

# 전역 네이밍 규칙: API 필드명 자동 변환 옵션 (예: 'camelize' 또는 'underscore')
JSON_API_FORMAT_FIELD_NAMES = 'camelize'

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

# 환경 변수 TIME_ZONE을 우선 사용, 없으면 기본 Asia/Seoul
TIME_ZONE = os.environ.get('TIME_ZONE', 'Asia/Seoul')

USE_I18N = True

# 로컬 시간으로 통일 (DB 저장 포함): naive local datetime 사용
USE_TZ = False

# Static and Media files settings
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'static'

MEDIA_URL = '/media/'

MEDIA_ROOT = BASE_DIR / 'media'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'WARNING',  # DEBUG → WARNING
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'WARNING',  # DEBUG → WARNING
            'propagate': True,
        },
        'agriseed': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
        'corecode': {
            'handlers': ['console'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}
