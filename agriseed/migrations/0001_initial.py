# Generated by Django 5.2 on 2025-07-08 08:34

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('event', models.CharField(max_length=200)),
                ('status', models.CharField(max_length=50)),
                ('location', models.CharField(max_length=100)),
                ('icon', models.CharField(max_length=100)),
                ('icon_class', models.CharField(max_length=100)),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='ControlHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField()),
                ('action', models.CharField(max_length=200)),
                ('trigger', models.CharField(max_length=200)),
                ('status', models.CharField(max_length=50)),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='ControlItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField(blank=True, help_text='설명')),
            ],
        ),
        migrations.CreateModel(
            name='ControlRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('icon', models.CharField(max_length=100)),
                ('icon_bg', models.CharField(max_length=100)),
                ('conditions', models.JSONField()),
                ('actions', models.JSONField()),
                ('last_executed', models.DateTimeField()),
                ('active', models.BooleanField()),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='ControlSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fan_is_on', models.BooleanField(default=False, help_text='팬 작동 여부 (기본값: 꺼짐)')),
                ('fan_speed', models.IntegerField(default=50, help_text='팬 속도 (기본값: 50%)')),
                ('water_is_on', models.BooleanField(default=False, help_text='물 공급 여부 (기본값: 꺼짐)')),
                ('water_flow', models.FloatField(default=2.5, help_text='물 흐름 속도 (기본값: 2.5 L/min)')),
                ('vent_open', models.IntegerField(default=50, help_text='환기구 개방 정도 (기본값: 50%)')),
                ('light_is_on', models.BooleanField(default=False, help_text='조명 작동 여부 (기본값: 꺼짐)')),
                ('light_intensity', models.IntegerField(default=50, help_text='조명 강도 (기본값: 50%)')),
                ('auto_mode', models.BooleanField(default=True, help_text='자동 모드 여부 (기본값: 켜짐)')),
                ('schedule_start', models.TimeField(default='06:00', help_text='스케줄 시작 시간 (기본값: 06:00)')),
                ('schedule_end', models.TimeField(default='18:00', help_text='스케줄 종료 시간 (기본값: 18:00)')),
                ('abnormal_temp_alert', models.BooleanField(default=True, help_text='이상온도 알림 (기본값: 켜짐)')),
                ('abnormal_humidity_alert', models.BooleanField(default=True, help_text='이상습도 알림 (기본값: 켜짐)')),
                ('water_alert', models.BooleanField(default=True, help_text='급수알림 (기본값: 켜짐)')),
                ('fault_alert', models.BooleanField(default=True, help_text='고장알림 (기본값: 켜짐)')),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='Crop',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='작물 종류명', max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('device_id', models.CharField(max_length=20, unique=True)),
                ('icon', models.CharField(max_length=100)),
                ('location', models.CharField(max_length=100)),
                ('installed_at', models.DateField()),
                ('status', models.CharField(max_length=50)),
                ('type', models.CharField(max_length=50)),
                ('info_link', models.URLField()),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='Facility',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Unknown Facility', help_text='시설 이름', max_length=100)),
                ('type', models.CharField(default='vinyl', help_text='시설 유형 (예: vinyl, glass 등)', max_length=50)),
                ('location', models.CharField(default='Unknown Location', help_text='시설 위치', max_length=200)),
                ('area', models.FloatField(default=100.0, help_text='시설 면적 (기본값: 100 제곱미터)')),
                ('zone_count', models.IntegerField(default=1, help_text='구역 수 (기본값: 1)')),
                ('manager', models.CharField(default='Unknown Manager', help_text='시설 관리자', max_length=100)),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
                ('LSIS', models.JSONField(blank=True, help_text='토양 조건', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='FacilityHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.JSONField(default=list, help_text='온도 기록')),
                ('humidity', models.JSONField(default=list, help_text='습도 기록')),
                ('light', models.JSONField(default=list, help_text='조도 기록')),
                ('soil_moisture', models.JSONField(default=list, help_text='토양 수분 기록')),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='Issue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('title', models.CharField(max_length=200)),
                ('time', models.DateTimeField()),
                ('details', models.JSONField()),
                ('button_label', models.CharField(max_length=100)),
                ('icon', models.CharField(max_length=100)),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='RecipeItemValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('set_value', models.FloatField(help_text='설정값 (목표값 등)')),
                ('min_value', models.FloatField(blank=True, help_text='최소 허용값 (선택)', null=True)),
                ('max_value', models.FloatField(blank=True, help_text='최대 허용값 (선택)', null=True)),
                ('priority', models.IntegerField(blank=True, help_text='우선순위 (선택)', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='RecipeProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipe_name', models.CharField(help_text='레시피 이름 (예: 초기 생장기, 생식기 등)', max_length=200)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('is_active', models.BooleanField(blank=True, default=True, help_text='레시피 활성화 여부', null=True)),
                ('is_deleted', models.BooleanField(blank=True, default=False, help_text='삭제 여부', null=True)),
                ('duration_days', models.IntegerField(blank=True, help_text='기간 (일)', null=True)),
                ('description', models.TextField(blank=True, help_text='설명')),
                ('order', models.IntegerField(default=0, help_text='레시피 순서 (우선순위)')),
            ],
        ),
        migrations.CreateModel(
            name='ResolvedIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('title', models.CharField(max_length=200)),
                ('action', models.CharField(max_length=200)),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('icon', models.CharField(max_length=100)),
                ('title', models.CharField(max_length=200)),
                ('schedule', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('enabled', models.BooleanField()),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='SensorData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature', models.FloatField(default=24.5, help_text='온도 (기본값: 24.5°C)')),
                ('humidity', models.FloatField(default=65.0, help_text='습도 (기본값: 65%)')),
                ('light', models.FloatField(default=350.0, help_text='조도 (기본값: 350 lux)')),
                ('soil_moisture', models.FloatField(default=42.0, help_text='토양 수분 (기본값: 42%)')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='데이터 생성 시간')),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
            ],
        ),
        migrations.CreateModel(
            name='Variety',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='품종명', max_length=100)),
                ('category', models.CharField(blank=True, help_text='작물 분류 (예: 과채류)', max_length=100, null=True)),
                ('origin', models.CharField(blank=True, help_text='원산지', max_length=100, null=True)),
                ('registered_at', models.DateField(blank=True, help_text='등록일', null=True)),
                ('seed_amount', models.CharField(blank=True, help_text='씨앗 보유량', max_length=50, null=True)),
                ('difficulty', models.CharField(blank=True, help_text='재배 난이도', max_length=50, null=True)),
                ('temperature', models.JSONField(blank=True, help_text='적정 온도 범위', null=True)),
                ('humidity', models.JSONField(blank=True, help_text='적정 습도 범위', null=True)),
                ('sunlight', models.JSONField(blank=True, help_text='일조량 범위', null=True)),
                ('soil', models.JSONField(blank=True, help_text='토양 조건', null=True)),
                ('sowing_period', models.CharField(blank=True, help_text='파종기 범위', max_length=100, null=True)),
                ('harvest_period', models.CharField(blank=True, help_text='수확기 범위', max_length=100, null=True)),
                ('growth_duration', models.JSONField(blank=True, help_text='생육 기간 범위', null=True)),
                ('expected_yield', models.JSONField(blank=True, help_text='예상 수확량 범위', null=True)),
                ('fruit_size', models.JSONField(blank=True, help_text='과실 크기 범위', null=True)),
                ('sugar_content', models.JSONField(blank=True, help_text='당도 범위', null=True)),
                ('disease_resistance', models.CharField(blank=True, help_text='병해충 저항성', max_length=100, null=True)),
                ('note', models.CharField(blank=True, help_text='특이사항', max_length=200, null=True)),
                ('guide', models.TextField(blank=True, help_text='재배 가이드', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VarietyGuide',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('guide', models.TextField(help_text='재배 가이드')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='작성일시')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='수정일시')),
                ('author', models.CharField(blank=True, help_text='작성자', max_length=100, null=True)),
                ('note', models.CharField(blank=True, help_text='비고/특이사항', max_length=200, null=True)),
                ('stage_tips', models.JSONField(blank=True, help_text='재배 단계별 설정값 및 팁', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VarietyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='품종 이미지', upload_to='variety_images/')),
                ('description', models.CharField(blank=True, help_text='이미지 설명', max_length=200, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='업로드 일시')),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='Default Zone', help_text='구역 이름', max_length=100)),
                ('type', models.CharField(default='온실', help_text='구역 유형 (예: 온실, 저장고 등)', max_length=50)),
                ('area', models.FloatField(default=50.0, help_text='구역 면적 (기본값: 50 제곱미터)')),
                ('style', models.CharField(blank=True, default='일반', help_text='구역 스타일 (예: 일반, 특수 등)', max_length=50, null=True)),
                ('expected_yield', models.FloatField(blank=True, default=0.0, help_text='예상 수확량(kg)', null=True)),
                ('sowing_date', models.DateField(blank=True, help_text='파종일', null=True)),
                ('expected_harvest_date', models.DateField(blank=True, help_text='예상 수확일', null=True)),
                ('health_status', models.CharField(blank=True, default='양호', help_text='건강 상태 (예: 양호, 주의, 위험 등)', max_length=50, null=True)),
                ('environment_status', models.CharField(blank=True, default='정상', help_text='환경 상태 (예: 정상, 주의, 위험 등)', max_length=50, null=True)),
                ('status', models.CharField(blank=True, choices=[('활성화', '활성화'), ('비활성화', '비활성화'), ('작업중', '작업중')], default='활성화', help_text='구역 상태 (활성화, 비활성화, 작업중)', max_length=20, null=True)),
                ('is_deleted', models.BooleanField(default=False, help_text='삭제 여부')),
                ('watering_amount_per_time', models.FloatField(default=0.0, help_text='1회 급수량 (L)')),
                ('daily_watering_count', models.IntegerField(default=1, help_text='일일 급수 횟수')),
                ('watering_interval', models.CharField(default='매일', help_text='공급 주기 (예: 매일, 격일 등)', max_length=50)),
                ('watering_amount', models.FloatField(default=0.0, help_text='공급량 (mL)')),
            ],
        ),
    ]
